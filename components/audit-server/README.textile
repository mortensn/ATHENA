ATHENA Project: Management Tools for the Cultural Sector
Copyright (C) 2010, Fractured Atlas

This document is licensed under a Creative Commons Attribution 3.0 United
States License, a copy of which you should have received with this
document. If not, see http://creativecommons.org/licenses/by/3.0/us

You may share and adapt this work under the terms this license, provided
you describe the changes and attribute the original work to the copyright
holder above.

=====

The end-points assume that you have deploed ATHENA-Tix as "tickets" to an external glassfish container.  The application is available at:

http://hostname.com:port/tickets/

*POST http://hostname.com:port/tickets*

Save a ticket.  If an id is included in the JSON body, that ticket will be updated.  If no id is specified, the ticket will be saved as new.

+Example request:+

pre. /tickets

pre. body =>
{"name":"ticket",
 "props":
  {"PRICE":"50",
   "HALF_PRICE":"true",
   "SEAT_NUMBER":"10",
   "TITLE":"Jersey Boys",
   "TIER":"NONE",
   "PERFORMANCE":"2010-10-02 09:00",
   "SECTION":"B",
   "SOLD":"false",
   "VENUE":"St. James Theater"}}

+Example response:+

pre. {"name":"ticket",
 "id":"44",
 "props":
  {"PRICE":"50",
   "HALF_PRICE":"true",
   "SEAT_NUMBER":"10",
   "TITLE":"Jersey Boys",
   "TIER":"NONE",
   "PERFORMANCE":"2010-10-02 09:00",
   "SECTION":"B",
   "SOLD":"false",
   "VENUE":"St. James Theater"}}

*PUT http://hostname.com:port/tickets/{id}*

Update a ticket

+Example request:+

pre. /tickets/{id}

pre. body =>
{"name":"ticket",
 "props":
  {"PRICE":"50",
   "HALF_PRICE":"true",
   "SEAT_NUMBER":"10",
   "TITLE":"Jersey Boys",
   "TIER":"NONE",
   "PERFORMANCE":"2010-10-02 09:00",
   "SECTION":"B",
   "SOLD":"false",
   "VENUE":"St. James Theater"}}

+Example response:+

pre. {"name":"ticket",
 "id":"44",
 "props":
  {"PRICE":"50",
   "HALF_PRICE":"true",
   "SEAT_NUMBER":"10",
   "TITLE":"Jersey Boys",
   "TIER":"NONE",
   "PERFORMANCE":"2010-10-02 09:00",
   "SECTION":"B",
   "SOLD":"false",
   "VENUE":"St. James Theater"}}

*GET /tickets/{id}*

Get the ticket for this id

+Example request:+

pre. /tickets/44

+Example response:+

pre. {"name":"ticket",
 "id":"44",
 "props":
  {"PRICE":"50",
   "HALF_PRICE":"true",
   "SEAT_NUMBER":"10",
   "TITLE":"Jersey Boys",
   "TIER":"NONE",
   "PERFORMANCE":"2010-10-02 09:00",
   "SECTION":"B",
   "SOLD":"false",
   "VENUE":"St. James Theater"}}

*GET /tickets/{id}/props*

Get the properties for this ticket

+Example request:+

pre. /tickets/44/props

+Example response:+

pre. {"HALF_PRICE":"true",
        "PRICE":"50",
        "VENUE":"St. James Theater",
        "SECTION":"B","TIER":"NONE",
        "PERFORMANCE":"2010-10-02 09:00",
        "SOLD":"false",
        "TITLE":"Jersey Boys",
        "SEAT_NUMBER":"10"}

*DELETE /tickets/{id}*

Delete this ticket.  A successful request will return a 204 - No content.

+Example request:+

pre. /tickets/44

+Example response:+

pre. 204 No Content

*DELETE /tickets/{id}/props/{prop_name}*

Delete a property from this ticket.  A successful request will return a 204 - No content.

+Example request:+

pre. /tickets/44/props/HALF_PRICE

+Example response:+

pre. 204 No Content

*GET /tickets*

Search for tickets.  Return an array of tickets matching the criteria  If no criteria are specified, Parakeet will respond with 405 - Method not allowed

+Example request:+

pre. /tickets?HALF_PRICE='=true'&PRICE='=50'

+Example response:+

pre. [ {"name":"ticket",
 "id":"44",
 "props":
  {"PRICE":"50",
   "HALF_PRICE":"true",
   "SEAT_NUMBER":"10",
   "TITLE":"Jersey Boys",
   "TIER":"NONE",
   "PERFORMANCE":"2010-10-02 09:00",
   "SECTION":"B",
   "SOLD":"false",
   "VENUE":"St. James Theater"}} ]

*POST /tickets/fields*

Save a field.  If an id is included in the JSON body, that ticket will be updated.  If no id is specified, the field will be saved as new.

+Name -+ the name of the field.  It can only contain letters, numbers, and underscores.
+Strict -+ the strictness of the field.  Strict fields can only be set to a specified list of values.  Non-strict fields can be set to any value within the bounds of it's value type
+valueType -+ The type of the field.  Supported types are STRING, INTEGER, DATETIME, and BOOLEAN

Once created, the Strict and valueType properties cannot be changed.

BOOLEAN fields cannot be marked as strict.

propValues cannot be edited using this endpoint.

+Example request:+

pre. /tickets/fields

pre. body =>
{"name":"SECTION","strict":false,"valueType":"STRING"}

+Example response:+

pre. {"id":"8","name":"SECTION","strict":false,"valueType":"STRING","propValues":[]}

*GET /tickets/fields/{id}*

Get the field for this id

+Example request:+

pre. /tickets/fields/8

+Example response:+

pre. {"id":"8","name":"SECTION","strict":false,"valueType":"STRING","propValues":[]}

* GET /tickets/fields *

Get all fields

+Example request:+

pre. /tickets/fields

+Example response:+

pre. [{"id":"7","name":"LOCKED","strict":false,"valueType":"STRING","propValues":[]},
{"id":"8","name":"SECTION","strict":false,"valueType":"STRING","propValues":[]}]

*DELETE /tickets/fields/{id}*

Delete this field.  A successful request with return a 204 - No content.

+Example request:+

pre. /tickets/fields/44

+Example response:+

pre. 204 No Content

*POST /tickets/fields/{id}/values*

Add a possible value to a strict field, or update the value (if id is included).  If this field already has this as a possible value, Parakeet will return 400 - Bad Request

+Example request:+

pre. /tickets/fields/6/values

pre. body =>
{"propValue":"REDEEMED"}

+Example response:+

pre. {"id":"5","propValue":"REDEEMED"}

*GET /tickets/fields/{id}/values*

Get the possible values for this field

+Example request:+

pre. /tickets/fields/6/values

+Example response:+

pre. [{"id":"1","propValue":"FREE"},
        {"id":"2","propValue":"BOOKING"},
        {"id":"3","propValue":"SOLD"},
        {"id":"4","propValue":"JOIST"},
        {"id":"5","propValue":"REDEEMED"}]